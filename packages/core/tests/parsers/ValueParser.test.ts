import { describe, expect, test } from 'vitest';
import { ValueParser } from "../../src/parsers/ValueParser";
import { Formatter } from '../../src/transformers/Formatter';

// Changed test focus to avoid circular references during testing
describe('ValueParser', () => {
    const formatter = new Formatter();
    test.each([
        ["ColumnReference", "a.id", '"a"."id"'],
        ["ColumnReference - Wildcard", "*", "*"],
        ["ColumnReference - Table Wildcard", "c.*", '"c".*'],
        ["ColumnReference - Multi-namespaced Wildcard (SQLServer style)", "[db].[schema].*", '"db"."schema".*'],
        ["LiteralValue - Numeric", "123", "123"],
        ["LiteralValue - String", "'テスト文字列'", "'テスト文字列'"],
        ["LiteralValue - TRUE", "TRUE", "true"],
        ["LiteralValue - FALSE", "FALSE", "false"],
        ["LiteralValue - NULL", "NULL", "null"],
        ["BinaryExpression - Arithmetic operation", "a.id + 10", '"a"."id" + 10'],
        ["BinaryExpression - Multiple operators", "price * quantity - discount", '"price" * "quantity" - "discount"'],
        ["UnaryExpression - NOT operator", "NOT is_active", 'not "is_active"'],
        ["ParenExpression - Expression enclosed in parentheses", "(a + b) * c", '("a" + "b") * "c"'],
        ["FunctionCall - Single argument", "COUNT(id)", 'count("id")'],
        ["FunctionCall - Multiple arguments", "SUBSTRING(name, 1, 3)", 'substring("name", 1, 3)'],
        ["FunctionCall - Namespaced (schema)", "myschema.myfunc(1, 2)", '"myschema".myfunc(1, 2)'],
        ["FunctionCall - Namespaced (multiple)", "dbo.util.myfunc(5)", '"dbo"."util".myfunc(5)'],
        ["ParameterExpression - Parameter", "@userId", ":userId"],
        ["ArrayExpression - Array", "ARRAY[1, 2, 3]", "array[1, 2, 3]"],
        ["ArrayExpression - Function call", "ARRAY(SELECT 1)", "array(select 1)"],
        ["CASE - Simple CASE expression", "CASE age WHEN 18 THEN 'young' WHEN 65 THEN 'senior' ELSE 'adult' END", "case \"age\" when 18 then 'young' when 65 then 'senior' else 'adult' end"],
        ["CASE WHEN - Conditional branching", "CASE WHEN age > 18 THEN 'adult' ELSE 'minor' END", "case when \"age\" > 18 then 'adult' else 'minor' end"],
        ["BETWEEN - Range specification", "age BETWEEN 20 AND 30", '"age" between 20 and 30'],
        ["Complex expression - combination of multiple elements", "CASE WHEN a.status = 1 THEN upper(a.name) ELSE a.code || '-' || @suffix END", 'case when "a"."status" = 1 then upper("a"."name") else "a"."code" || \'-\' || :suffix end'],
        ["Logical operators - AND/OR", "a.flag = true AND (b.value > 10 OR c.status != 0)", '"a"."flag" = true and ("b"."value" > 10 or "c"."status" != 0)'],
        ["IN operator", "category_id IN (1, 2, 3)", '"category_id" in (1, 2, 3)'],
        ["IS operator", "a.value IS NULL", '"a"."value" is null'],
        ["IS DISTINCT FROM operator", "a.value IS DISTINCT FROM b.value", '"a"."value" is distinct from "b"."value"'],
        ["IS NOT DISTINCT FROM operator", "a.value IS NOT DISTINCT FROM b.value", '"a"."value" is not distinct from "b"."value"'],
        ["Unicode escape (U&'')", "U&'\\0041\\0042\\0043\\0044'", "U&'\\0041\\0042\\0043\\0044'"],
        ["LIKE escape - percent", "'a_b' LIKE 'a\\_b' ESCAPE '\\'", "'a_b' like 'a\\_b' escape '\\'"],
        ["EXTRACT - Extract month from timestamp", "EXTRACT(MONTH FROM '2025-03-21 12:34:56'::timestamp)", "extract(month from '2025-03-21 12:34:56'::timestamp)"],
        ["POSITION function", "POSITION('b' IN 'abc')", 'position(\'b\' in \'abc\')'],
        ["INTERVAL - Adding time interval", "interval '2 days' + interval '3 hours'", "interval '2 days' + interval '3 hours'"],
        ["SUBSTRING", "substring('Thomas', 2, 3)", "substring('Thomas', 2, 3)"],
        ["SUBSTRING with FROM and FOR", "substring('Thomas' from 2 for 3)", "substring('Thomas' from 2 for 3)"],
        ["SUBSTRING with only FROM", "substring('Thomas' from 3)", "substring('Thomas' from 3)"],
        ["SUBSTRING with only FOR", "substring('Thomas' for 2)", "substring('Thomas' for 2)"],
        ["SUBSTRING with FROM using regex pattern", "substring('Thomas' from '...$')", "substring('Thomas' from '...$')"],
        ["SUBSTRING with SIMILAR pattern", "substring('Thomas' similar '%#\"o_a#\"_' escape '#')", "substring('Thomas' similar '%#\"o_a#\"_' escape '#')"],
        ["TRIM", "trim('  yxTomxx  ')", "trim('  yxTomxx  ')"],
        ["TRIM with default BOTH and characters", "trim('xyz' from 'yxTomxx')", "trim('xyz' from 'yxTomxx')"],
        ["TRIM with explicit BOTH and characters", "trim(both 'xyz' from 'yxTomxx')", "trim(both 'xyz' from 'yxTomxx')"],
        ["TRIM with LEADING and characters", "trim(leading 'xyz' from 'yxTomxx')", "trim(leading 'xyz' from 'yxTomxx')"],
        ["TRIM with TRAILING and characters", "trim(trailing 'xyz' from 'yxTomxx')", "trim(trailing 'xyz' from 'yxTomxx')"],
        ["Postgres TRIM with LEADING from and characters", "trim(leading from 'yxTomxx', 'xyz')", "trim(leading from 'yxTomxx', 'xyz')"],
        ["Postgres TRIM with TRAILING from and characters", "trim(trailing from 'yxTomxx', 'xyz')", "trim(trailing from 'yxTomxx', 'xyz')"],
        ["Postgres TRIM with explicit BOTH from and characters", "trim(both from 'yxTomxx', 'xyz')", "trim(both from 'yxTomxx', 'xyz')"],
        ["Postgres TRIM with default BOTH and characters", "trim('yxTomxx', 'xyz')", "trim('yxTomxx', 'xyz')"],
        ["CAST with AS syntax", "CAST(id AS INTEGER)", "cast(\"id\" as INTEGER)"],
        ["CAST with precision", "CAST(price AS NUMERIC(10,2))", "cast(\"price\" as NUMERIC(10, 2))"],
        ["CAST with length", "CAST(name AS VARCHAR(50))", "cast(\"name\" as VARCHAR(50))"],
        ["Postgres CAST with AS syntax", "id::INTEGER", "\"id\"::INTEGER"],
        ["Postgres CAST with precision", "price::NUMERIC(10,2)", "\"price\"::NUMERIC(10, 2)"],
        ["Postgres CAST with length", "name::VARCHAR(50)", "\"name\"::VARCHAR(50)"],
        ["CAST with DOUBLE PRECISION", "value::DOUBLE PRECISION", "\"value\"::DOUBLE PRECISION"],
        ["CAST with AS syntax and namespaced type", "CAST(id AS myschema.INTEGER)", "cast(\"id\" as \"myschema\".INTEGER)"],
        ["Postgres CAST with :: and namespaced type", "id::myschema.INTEGER", "\"id\"::\"myschema\".INTEGER"],
        ["CAST with CHARACTER VARYING", "text::CHARACTER VARYING(100)", "\"text\"::CHARACTER VARYING(100)"],
        ["CAST with TIME WITH TIME ZONE", "ts::TIME WITH TIME ZONE", "\"ts\"::TIME WITH TIME ZONE"],
        ["CAST with TIMESTAMP WITHOUT TIME ZONE", "date::TIMESTAMP WITHOUT TIME ZONE", "\"date\"::TIMESTAMP WITHOUT TIME ZONE"],
        ["Postgres CAST with INTERVAL", "'1 month'::interval", "'1 month'::interval"],
        ["OVERLAY function - basic", "OVERLAY('abcdef' PLACING 'xyz' FROM 2)", "overlay('abcdef' placing 'xyz' from 2)"],
        ["OVERLAY function - with FOR", "OVERLAY('abcdef' PLACING 'xyz' FROM 2 FOR 3)", "overlay('abcdef' placing 'xyz' from 2 for 3)"],
        ["AT TIME ZONE - basic", "current_timestamp AT TIME ZONE 'JST'", "current_timestamp at time zone 'JST'"],
        ["AT TIME ZONE - column reference", "created_at AT TIME ZONE 'UTC'", "\"created_at\" at time zone 'UTC'"],
        ["AT TIME ZONE - timestamp literal", "'2025-03-28 15:30:00'::timestamp AT TIME ZONE 'America/New_York'", "'2025-03-28 15:30:00'::timestamp at time zone 'America/New_York'"],
        ["AT TIME ZONE - nested", "('2025-03-28 15:30:00'::timestamp AT TIME ZONE 'UTC') AT TIME ZONE 'Asia/Tokyo'", "('2025-03-28 15:30:00'::timestamp at time zone 'UTC') at time zone 'Asia/Tokyo'"],
        ["Window function - simple OVER()", "row_number() OVER()", "row_number() over()"],
        ["Window function - with PARTITION BY", "rank() OVER(PARTITION BY department_id)", "rank() over(partition by \"department_id\")"],
        ["Window function - with ORDER BY", "dense_rank() OVER(ORDER BY salary DESC)", "dense_rank() over(order by \"salary\" desc)"],
        ["Window function - with PARTITION BY and ORDER BY", "sum(salary) OVER(PARTITION BY department_id ORDER BY hire_date)", "sum(\"salary\") over(partition by \"department_id\" order by \"hire_date\")"],
        ["Window function - with named window", "avg(salary) OVER w", "avg(\"salary\") over \"w\""],
        ["InlineQuery - Simple SELECT", "(SELECT id FROM users)", "(select \"id\" from \"users\")"],
        ["InlineQuery - With WHERE clause", "(SELECT name FROM products WHERE price > 100)", "(select \"name\" from \"products\" where \"price\" > 100)"],
        ["InlineQuery - In comparison", "user_id = (SELECT id FROM users WHERE name = 'Alice')", "\"user_id\" = (select \"id\" from \"users\" where \"name\" = 'Alice')"],
        ["InlineQuery - With aggregation", "department_id IN (SELECT dept_id FROM departments WHERE active = TRUE)", "\"department_id\" in (select \"dept_id\" from \"departments\" where \"active\" = true)"],
        ["FunctionCall with arithmetic operation", "count(*) + 1", "count(*) + 1"],
        ["Postgres Array Type", ":array::int[]", ":array::int[]"],
        ["Postgres Array Type - Single Item", ":item::int", ":item::int"],
        ["Postgres Array Type - Multi-dimensional", ":array::int[][]", ":array::int[][]"],
        // BETWEEN precedence tests - ensuring BETWEEN binds more tightly than AND/OR
        ["BETWEEN with AND - precedence test", "age BETWEEN 10 AND 20 AND status = 'active'", '"age" between 10 and 20 and "status" = \'active\''],
        ["BETWEEN with OR - precedence test", "age BETWEEN 10 AND 20 OR status = 'inactive'", '"age" between 10 and 20 or "status" = \'inactive\''],
        ["BETWEEN with parameters", "value BETWEEN :min AND :max", '"value" between :min and :max'],
        ["BETWEEN with complex expressions", "(x + y) BETWEEN 10 AND (z * 2)", '("x" + "y") between 10 and ("z" * 2)'],
        ["BETWEEN with parentheses", "(age BETWEEN 10 AND 20) OR status = 'active'", '("age" between 10 and 20) or "status" = \'active\''],
        // Complex type cast tests - covering edge cases from debug scripts
        ["Type cast - parameterized NUMERIC", '"value"::NUMERIC(10,2)', '"value"::NUMERIC(10, 2)'],
        ["Type cast - parameterized VARCHAR", '"name"::VARCHAR(50)', '"name"::VARCHAR(50)'],
        ["Type cast - parameterized DECIMAL", '"data"::DECIMAL(8,4)', '"data"::DECIMAL(8, 4)'],
        ["Type cast - parameterized TIMESTAMP", '"timestamp"::TIMESTAMP(6)', '"timestamp"::TIMESTAMP(6)'],
        ["Type cast - namespaced type", '"id"::pg_catalog.int4', '"id"::"pg_catalog".int4'],
        ["Type cast - public schema type", '"value"::public.custom_type', '"value"::"public".custom_type'],
        ["Type cast - complex expression", '(x + y)::INTEGER', '("x" + "y")::INTEGER'],
        ["Type cast - CASE expression", 'CASE WHEN a > b THEN a ELSE b END::BIGINT', 'case when "a" > "b" then "a" else "b" end::BIGINT'],
        ["Type cast - multiple casts", '"a"::INTEGER::TEXT', '"a"::INTEGER::TEXT'],
        ["Type cast - with parentheses", '("col1" || "col2")::VARCHAR(100)', '("col1" || "col2")::VARCHAR(100)'],
        ["Type cast - array type", '"id"::int[]', '"id"::int[]'],
        ["Type cast - multi-dimensional array", '"data"::int[][]', '"data"::int[][]'],
        ["Type cast - type without parameters", '"value"::NUMERIC', '"value"::NUMERIC'],
        ["Type cast - literal cast", '123::TEXT', '123::TEXT'],
        ["Type cast - function cast", 'NOW()::DATE', 'now()::DATE'],
        // Complex logical expressions to ensure no regression
        ["Complex logical - nested AND/OR", 'a = 1 AND (b = 2 OR c = 3) AND d = 4', '"a" = 1 and ("b" = 2 or "c" = 3) and "d" = 4'],
        ["Complex logical - mixed with BETWEEN", 'a BETWEEN 1 AND 5 AND (b = 2 OR c BETWEEN 10 AND 20)', '"a" between 1 and 5 and ("b" = 2 or "c" between 10 and 20)'],
        ["COUNT with DISTINCT and nested function", "COUNT(DISTINCT DATE('2025-01-01'))", "count(distinct DATE('2025-01-01'))"],
        // JSON operators (PostgreSQL/MySQL)
        ["JSON arrow operator", "json_col -> 'key'", "\"json_col\" -> 'key'"],
        ["JSON double arrow operator", "json_col ->> 'key'", "\"json_col\" ->> 'key'"],
        ["JSON path operator", "json_col #> '{key,subkey}'", "\"json_col\" #> '{key,subkey}'"],
        ["JSON path text operator", "json_col #>> '{key,subkey}'", "\"json_col\" #>> '{key,subkey}'"],
        ["JSON contains operator", "json_col @> '{\"key\": \"value\"}'", "\"json_col\" @> '{\"key\": \"value\"}'"],
        ["JSON contained by operator", "'{\"key\": \"value\"}' <@ json_col", "'{\"key\": \"value\"}' <@ \"json_col\""],
        ["JSON key exists operator", "json_col ? 'key'", "\"json_col\" ? 'key'"],
        ["JSON any key exists operator", "json_col ?| array['key1', 'key2']", "\"json_col\" ?| array['key1', 'key2']"],
        ["JSON all keys exist operator", "json_col ?& array['key1', 'key2']", "\"json_col\" ?& array['key1', 'key2']"],
        // Regular expression operators (PostgreSQL/MySQL)
        ["Regex match operator", "text_col ~ 'pattern'", "\"text_col\" ~ 'pattern'"],
        ["Regex match case insensitive", "text_col ~* 'pattern'", "\"text_col\" ~* 'pattern'"],
        ["Regex not match operator", "text_col !~ 'pattern'", "\"text_col\" !~ 'pattern'"],
        ["Regex not match case insensitive", "text_col !~* 'pattern'", "\"text_col\" !~* 'pattern'"],
        ["MySQL RLIKE operator", "text_col RLIKE 'pattern'", "\"text_col\" rlike 'pattern'"],
        ["MySQL REGEXP operator", "text_col REGEXP 'pattern'", "\"text_col\" regexp 'pattern'"],
        // Phase 2: Additional MySQL and SQL Server operators
        ["MySQL MOD operator", "a MOD b", "\"a\" mod \"b\""],
        ["MySQL XOR operator", "a XOR b", "\"a\" xor \"b\""],
        ["SQL Server MONEY literal - basic", "$123.45", "$123.45"],
        ["SQL Server MONEY literal - with commas", "$1,234.56", "$1,234.56"],
        ["PostgreSQL parameter vs MONEY - parameter wins", "$1000", ":1000"],
        ["PostgreSQL parameter vs MONEY - MONEY wins", "$1000.50", "$1000.50"],
        // PostgreSQL Dollar-quoted strings
        ["PostgreSQL dollar-quoted string - basic", "$$hello world$$", "$$hello world$$"],
        ["PostgreSQL dollar-quoted string - with tag", "$tag$content$tag$", "$tag$content$tag$"],
        ["PostgreSQL dollar-quoted string - empty", "$$$$", "$$$$"],
        ["PostgreSQL dollar-quoted string - with quotes inside", "$$it's a 'quoted' string$$", "$$it's a 'quoted' string$$"],
        ["PostgreSQL dollar-quoted string - multiline", "$func$\nBEGIN\n  RETURN 'hello';\nEND;\n$func$", "$func$\nBEGIN\n  RETURN 'hello';\nEND;\n$func$"],
    ])('%s', (_, text, expected = text) => {
        const value = ValueParser.parse(text);
        const sql = formatter.format(value);
        //console.log(`plain   : ${text}\nexpected: ${expected}\nsql     : ${sql}`);
        expect(sql).toBe(expected);
    });
});
